// top_screen.dart
// Main dashboard screen after user login. Provides access to review creation, viewing, settings, help, and sign-out.
//
//
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'general_screen.dart';
import 'settings_screen.dart';
import 'list_screen.dart';
import 'sub_preview_screen/review_context.dart';
import 'services/session_cache.dart';
import 'constants/strings.dart';
import 'constants/colours.dart';

class TopScreen extends StatefulWidget {
  const TopScreen({super.key});

  @override
  State<TopScreen> createState() => _TopScreenState();
}

class _TopScreenState extends State<TopScreen> {
  bool _isLoading = false;

  Future<void> _signOut() async {
    try {
      await FirebaseAuth.instance.signOut();
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('${AppStr.signOutFailed}: $e')),
      );
      return;
    }

    if (!mounted) return;
    Navigator.pushReplacementNamed(context, '/');
  }

  Future<void> _handleViewReviews() async {
    if (!mounted) return;
    setState(() => _isLoading = true);

    final userId = FirebaseAuth.instance.currentUser?.uid;
    if (userId == null) {
      if (mounted) {
        setState(() => _isLoading = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(AppStr.userNotAuthenticated)),
        );
      }
      return;
    }

    final reviewsRef = FirebaseDatabase.instance.ref('users/$userId/reviews');

    try {
      final snapshot = await reviewsRef.get();

      if (mounted) {
        if (snapshot.exists && snapshot.value is Map) {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (_) => const ReviewListScreen()),
          );
        } else {
          showDialog(
            context: context,
            builder: (_) => AlertDialog(
              title: const Text(
                AppStr.noReviewsTitle,
                style: TextStyle(fontFamily: 'Gelica'),
              ),
              content: const Text(
                AppStr.noReviewsMessage,
                style: TextStyle(fontFamily: 'Gelica'),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text(
                    AppStr.ok,
                    style: TextStyle(fontFamily: 'Gelica'),
                  ),
                ),
              ],
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('${AppStr.loadReviewsError}: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  void _startNewReview() {
    final newContext = ReviewContext(
      reviewMap: {},
      isEditing: false,
      reviewKey: null,
    );

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => GeneralScreen(context: newContext),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final displayName = SessionCache.userName.isNotEmpty ? SessionCache.userName : AppStr.anonUser;
    return Scaffold(
      backgroundColor: AppColors.beige,
      appBar: AppBar(
        automaticallyImplyLeading: false,
        backgroundColor: AppColors.darkGreen,
        title: Text(
          '${AppStr.appTitle} : $displayName',
          style: const TextStyle(
            color: Colors.white,
            fontFamily: 'Gelica',
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: true,
      ),
      body: Column(
        children: [
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 32),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  const SizedBox(height: 96),
                  const Text(
                    AppStr.restaurantReviews,
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      fontFamily: 'Gelica',
                      color: AppColors.red,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 48),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.ochre,
                      foregroundColor: Colors.black87,
                      minimumSize: const Size(double.infinity, 48),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                    ),
                    onPressed: _startNewReview,
                    child: const Text(AppStr.addReview, style: TextStyle(fontFamily: 'Gelica')),
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.ochre,
                      foregroundColor: Colors.black87,
                      minimumSize: const Size(double.infinity, 48),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                    ),
                    onPressed: _isLoading ? null : _handleViewReviews,
                    child: _isLoading
                        ? const SizedBox(
                            height: 24,
                            width: 24,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          )
                        : const Text(AppStr.viewReviews, style: TextStyle(fontFamily: 'Gelica')),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 36), // ✅ Adds breathing room above bottom buttons
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  ElevatedButton.icon(
                    onPressed: () {
                      Navigator.push(context, MaterialPageRoute(builder: (_) => const SettingsScreen()));
                    },
                    icon: const Icon(Icons.settings, color: Colors.white),
                    label: const Text(AppStr.settings, style: TextStyle(fontFamily: 'Gelica')),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.grey,
                      foregroundColor: Colors.white,
                      minimumSize: const Size(double.infinity, 48),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                    ),
                  ),
                  const SizedBox(height: 12),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.lightBlueAccent,
                      foregroundColor: Colors.white,
                      minimumSize: const Size(double.infinity, 48),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                    ),
                    onPressed: () => Navigator.pushNamed(context, '/help'),
                    child: const Text(AppStr.help, style: TextStyle(fontFamily: 'Gelica')),
                  ),
                  const SizedBox(height: 24), // ✅ Adds gap between Help and Sign Out
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.red,
                      foregroundColor: Colors.white,
                      minimumSize: const Size(double.infinity, 48),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                    ),
                    onPressed: _signOut,
                    child: const Text(AppStr.signOut, style: TextStyle(fontFamily: 'Gelica')),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}