// comments_screen.dart
// Captures user comments and selected occasion for the restaurant visit.
// Prepares review data for preview and submission.
//
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'package:flutter/material.dart';
import 'preview_screen.dart';
import 'sub_preview_screen/review_context.dart';
import 'sub_preview_screen/review_formatter.dart';
import 'services/session_cache.dart';
import 'goodfor_screen.dart';
import 'constants/restiview_constants.dart';
import 'constants/strings.dart'; // ✅ Centralized strings
import 'constants/colours.dart';

class CommentsScreen extends StatefulWidget {
  final ReviewContext context;

  const CommentsScreen({super.key, required this.context});

  @override
  State<CommentsScreen> createState() => _CommentsScreenState();
}

class _CommentsScreenState extends State<CommentsScreen> {
  bool _showAddOccasionField = false;
  final TextEditingController _newOccasionController = TextEditingController();
  late TextEditingController _commentsController;
  final TextEditingController _occasionController = TextEditingController();
  late String _selectedOccasion;
  File? _reviewPhoto;

  void _removePhoto() {
    if (!mounted) return;
    setState(() {
      _reviewPhoto = null;
      widget.context.reviewMap.remove('photoPath');
    });
  }

  Future<void> _capturePhoto() async {
    if (!SessionCache.allowPhotos) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text(AppStr.photoDisabled)),
      );
      return;
    }

    final picker = ImagePicker();
    final XFile? photo = await picker.pickImage(source: ImageSource.camera);

    if (photo != null && mounted) {
      setState(() {
        _reviewPhoto = File(photo.path);
        widget.context.reviewMap['photoPath'] = photo.path;
      });
    }
  }

  void _clearFields() {
    if (!mounted) return;
    setState(() {
      _commentsController.clear();
      _selectedOccasion = AppStr.defaultOccasion;
      _reviewPhoto = null;
      widget.context.reviewMap.remove('photoPath'); // ✅ Clear photo path
    });
  }

Future<void> _addInlineCustomOccasion() async {
  final newOccasion = _newOccasionController.text.trim();

  if (newOccasion.isEmpty || newOccasion.length > 24) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text(AppStr.occasionMaxLength)),
    );
    return;
  }

  final existsLocally = SessionCache.customOccasions.any(
    (o) => o.toLowerCase() == newOccasion.toLowerCase(),
  );
  if (existsLocally) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('"$newOccasion" ${AppStr.alreadyExists}')),
    );
    return;
  }

  final uid = FirebaseAuth.instance.currentUser?.uid;
  if (uid == null) return;

  final ref = FirebaseDatabase.instance.ref('users/$uid/customvals');
  final snapshot = await ref.get();
  if (!mounted) return;

  final List<List<dynamic>> updatedOccasions = [];

  if (snapshot.exists) {
    final data = snapshot.value as Map<dynamic, dynamic>;
    final raw = data['occasion'];
    if (raw is List) {
      for (final item in raw) {
        if (item is List && item.isNotEmpty) {
          updatedOccasions.add(List<dynamic>.from(item));
        }
      }
    }
    updatedOccasions.add([newOccasion, 0]);
  } else {
    updatedOccasions.add([newOccasion, 0]);
  }

  updatedOccasions.sort((a, b) =>
      (a[0] as String).toLowerCase().compareTo((b[0] as String).toLowerCase()));

  if (snapshot.exists) {
    await ref.update({'occasion': updatedOccasions});
  } else {
    await ref.set({
      'cuisine': [],
      'occasion': updatedOccasions,
      'country': [],
    });
  }

  final merged = <String>[];
  for (final s in systemOccasions) {
    if (!merged.contains(s)) merged.add(s);
  }
  for (final pair in updatedOccasions) {
    final name = pair[0] as String;
    if (!merged.contains(name)) merged.add(name);
  }
  merged.sort((a, b) => a.toLowerCase().compareTo(b.toLowerCase()));
  SessionCache.customOccasions = merged;

  if (!mounted) return;
  setState(() {
    _selectedOccasion = newOccasion;
    _newOccasionController.clear();
    _showAddOccasionField = false;
  });

  ScaffoldMessenger.of(context).showSnackBar(
    SnackBar(content: Text('"$newOccasion" ${AppStr.addedToOccasions}')),
  );
}

  @override
  void initState() {
    super.initState();
    _commentsController = TextEditingController(
      text: widget.context.reviewMap['comments'] ?? '',
    );
    _selectedOccasion = widget.context.reviewMap['occasion'] ?? AppStr.defaultOccasion;
    _occasionController.text = '';
    final path = widget.context.reviewMap['photoPath'];
    if (path != null && File(path).existsSync()) {
      _reviewPhoto = File(path);
    }
  }

  @override
  void dispose() {
    _commentsController.dispose();
    _occasionController.dispose(); // ✅ Dispose occasion controller
    _newOccasionController.dispose();
    super.dispose();
  }

  void _saveToContext() {
    widget.context.reviewMap['comments'] = _commentsController.text;
    widget.context.reviewMap['occasion'] = _selectedOccasion;
  }

  void _goToPreviewScreen() {
    _saveToContext();

    final email = SessionCache.userEmail;
    final name = SessionCache.userName;

    final formatted = formatReviewData(widget.context.reviewMap, email, name);

    final previewContext = ReviewContext(
      reviewMap: formatted,
      isEditing: widget.context.isEditing,
      reviewKey: widget.context.reviewKey,
    );

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => PreviewScreen(context: previewContext),
      ),
    );
  }

  void _goBack() {
    _saveToContext();
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (_) => GoodForScreen(context: widget.context),
      ),
    );
  }

@override
Widget build(BuildContext context) {
  final occasionItemsOrdered = <String>[
    ...systemOccasions,
    ...SessionCache.customOccasions.where((o) => !systemOccasions.contains(o)),
  ]..sort((a, b) => a.toLowerCase().compareTo(b.toLowerCase()));

  return Scaffold(
    backgroundColor: const Color(0xFFF5F0E6),
    appBar: AppBar(
      automaticallyImplyLeading: false,
      title: const Text(
        AppStr.commentsTitle,
        style: TextStyle(
          fontFamily: 'Gelica',
          fontWeight: FontWeight.bold,
          color: Colors.white,
        ),
      ),
      backgroundColor: const Color(0xFF2E4F3E),
      centerTitle: true,
    ),
    body: SafeArea(
      child: Column(
        children: [
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Expanded(
                        child: DropdownButtonFormField<String>(
                          initialValue: occasionItemsOrdered.contains(_selectedOccasion)
                              ? _selectedOccasion
                              : occasionItemsOrdered.first,
                          items: occasionItemsOrdered
                              .map((occasion) => DropdownMenuItem(
                                    value: occasion,
                                    child: Text(occasion),
                                  ))
                              .toList(),
                          onChanged: (value) {
                            if (!mounted) return;
                            setState(() => _selectedOccasion = value!);
                          },
                          decoration: const InputDecoration(labelText: AppStr.occasionLabel),
                        ),
                      ),
                      TextButton(
                        onPressed: () {
                          setState(() => _showAddOccasionField = !_showAddOccasionField);
                        },
                        child: const Text(AppStr.add),
                      ),
                    ],
                  ),
                  if (_showAddOccasionField)
                    Padding(
                      padding: const EdgeInsets.only(top: 8.0),
                      child: Row(
                        children: [
                          Expanded(
                            child: TextField(
                              controller: _newOccasionController,
                              decoration: const InputDecoration(hintText: AppStr.newOccasionHint),
                            ),
                          ),
                          const SizedBox(width: 8),
                          IconButton(
                            tooltip: AppStr.confirm,
                            color: Colors.green,
                            icon: const Icon(Icons.check),
                            onPressed: () async {
                              await _addInlineCustomOccasion();
                            },
                          ),
                          IconButton(
                            tooltip: AppStr.cancel,
                            color: Colors.grey,
                            icon: const Icon(Icons.close),
                            onPressed: () {
                              if (!mounted) return;
                              setState(() {
                                _newOccasionController.clear();
                                _showAddOccasionField = false;
                              });
                            },
                          ),
                        ],
                      ),
                    ),
                  const SizedBox(height: 16),
                  TextField(
                    controller: _commentsController,
                    decoration: const InputDecoration(labelText: AppStr.commentsLabel),
                    maxLines: 5,
                  ),
                  const SizedBox(height: 24),
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      '${AppStr.addressLabel} ${widget.context.reviewMap['restaddress'] ?? AppStr.notAvailable}',
                      style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Align(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      '${AppStr.phoneLabel} ${widget.context.reviewMap['restphone'] ?? AppStr.notAvailable}',
                      style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                    ),
                  ),
                  const SizedBox(height: 24),
                  Row(
                    children: [
                      ElevatedButton.icon(
                        onPressed: _capturePhoto,
                        icon: const Icon(Icons.camera_alt),
                        label: const Text(AppStr.addPhoto),
                        style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
                      ),
                      const SizedBox(width: 12),
                      if (_reviewPhoto != null)
                        ElevatedButton.icon(
                          onPressed: _removePhoto,
                          icon: const Icon(Icons.delete),
                          label: const Text(AppStr.removePhoto),
                          style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                        ),
                    ],
                  ),
                  if (_reviewPhoto != null)
                    Padding(
                      padding: const EdgeInsets.only(top: 12),
                      child: ClipRRect(
                        borderRadius: BorderRadius.circular(8),
                        child: Image.file(
                          _reviewPhoto!,
                          height: 120,
                          fit: BoxFit.cover,
                          errorBuilder: (_, __, ___) => const Text(AppStr.photoError),
                        ),
                      ),
                    ),
                  const SizedBox(height: 36),
                ],
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: _goBack,
                  style: ElevatedButton.styleFrom(backgroundColor: AppColors.ochre),
                  child: const Text(AppStr.back),
                ),
                ElevatedButton(
                  onPressed: _clearFields,
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.grey),
                  child: const Text(AppStr.clear),
                ),
                ElevatedButton(
                  onPressed: _goToPreviewScreen,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.yellow,
                    foregroundColor: Colors.black,
                  ),
                  child: const Text(AppStr.next),
                ),
              ],
            ),
          ),
        ],
      ),
    ),
  );
}
}