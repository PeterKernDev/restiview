// ratings_screen.dart
//
import 'package:flutter/material.dart';
import 'general_screen.dart';
import 'goodfor_screen.dart';
import 'preview_screen.dart';
import 'services/session_cache.dart';
import 'sub_preview_screen/review_formatter.dart' as formatter;
import 'sub_preview_screen/review_context.dart';
import 'package:flutter_rating_bar/flutter_rating_bar.dart';
import 'constants/strings.dart'; // âœ… Import centralized strings
import 'constants/colors.dart';

class RatingsScreen extends StatefulWidget {
  final ReviewContext context;

  const RatingsScreen({super.key, required this.context});

  @override
  State<RatingsScreen> createState() => _RatingsScreenState();
}

class _RatingsScreenState extends State<RatingsScreen> {
  late int foodRating;
  late int serviceRating;
  late int ambianceRating;
  late int drinksRating;
  late int vfmsRating;
  late int michelinStars;

  late double foodRatingDisplay;
  late double serviceRatingDisplay;
  late double ambianceRatingDisplay;
  late double drinksRatingDisplay;
  late double vfmsRatingDisplay;

  void _clearRatings() {
    if (!mounted) return;
    setState(() {
      foodRating = 0;
      serviceRating = 0;
      ambianceRating = 0;
      drinksRating = 0;
      vfmsRating = 0;
      michelinStars = 0;

      foodRatingDisplay = 0;
      serviceRatingDisplay = 0;
      ambianceRatingDisplay = 0;
      drinksRatingDisplay = 0;
      vfmsRatingDisplay = 0;
    });
  }

  @override
  void initState() {
    super.initState();
    final reviewMap = widget.context.reviewMap;

    foodRating = reviewMap['foodRating'] ?? 0;
    serviceRating = reviewMap['serviceRating'] ?? 0;
    ambianceRating = reviewMap['ambianceRating'] ?? 0;
    drinksRating = reviewMap['drinksRating'] ?? 0;
    vfmsRating = reviewMap['vfmsRating'] ?? 0;
    michelinStars = reviewMap['michelinStars'] ?? 0;

    foodRatingDisplay = foodRating / 4;
    serviceRatingDisplay = serviceRating / 4;
    ambianceRatingDisplay = ambianceRating / 4;
    drinksRatingDisplay = drinksRating / 4;
    vfmsRatingDisplay = vfmsRating / 4;
  }

  void _saveToContext() {
    final reviewMap = widget.context.reviewMap;

    reviewMap['foodRating'] = foodRating;
    reviewMap['serviceRating'] = serviceRating;
    reviewMap['ambianceRating'] = ambianceRating;
    reviewMap['drinksRating'] = drinksRating;
    reviewMap['vfmsRating'] = vfmsRating;
    reviewMap['michelinStars'] = michelinStars;

    final totalRating = foodRating + serviceRating + ambianceRating + drinksRating + vfmsRating;
    reviewMap['restrating'] = totalRating;
  }

  void _goToNextScreen() {
    _saveToContext();
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => GoodForScreen(context: widget.context),
      ),
    );
  }
  void _goToPreviewScreen() {
    _saveToContext(); // Ensure ratings are saved

    final email = SessionCache.userEmail;
    final name = SessionCache.userName;

    final formatted = formatter.formatReviewData(widget.context.reviewMap, email, name);

    final previewContext = ReviewContext(
      reviewMap: formatted,
      isEditing: widget.context.isEditing,
      reviewKey: widget.context.reviewKey,
    );

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => PreviewScreen(context: previewContext),
      ),
    );
  }
  void _goBack() {
    _saveToContext();
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (_) => GeneralScreen(context: widget.context),
      ),
    );
  }

  Widget _buildStarRatingRow(String label, double displayValue, Function(double) updateDisplay, Function(int) updateStored) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          SizedBox(
            width: 90,
            child: Text(
              label,
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.w500,
                fontFamily: 'Gelica',
              ),
            ),
          ),
          RatingBar.builder(
            initialRating: displayValue,
            minRating: 0,
            allowHalfRating: true,
            itemCount: 5,
            itemSize: 30,
            itemPadding: const EdgeInsets.symmetric(horizontal: 2),
            itemBuilder: (context, _) => const Icon(Icons.star, color: Colors.blue),
            onRatingUpdate: (val) {
              if (!mounted) return;
              setState(() {
                updateDisplay(val);
                updateStored((val * 4).round());
              });
            },
          ),
          const SizedBox(width: 8),
          Text(
            '${(displayValue * 4).round()}',
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
        ],
      ),
    );
  }

@override
Widget build(BuildContext context) {
  final totalRating = foodRating + serviceRating + ambianceRating + drinksRating + vfmsRating;

  return Scaffold(
    backgroundColor: AppColors.beige,
    appBar: AppBar(
      automaticallyImplyLeading: false,
      title: const Text(
        AppStr.rateTitle,
        style: TextStyle(
          fontFamily: 'Gelica',
          fontWeight: FontWeight.bold,
          color: Colors.white,
        ),
      ),
      backgroundColor: AppColors.darkGreen,
      centerTitle: true,
    ),
    body: Column(
      children: [
        Expanded(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 32),
                const Center(
                  child: Text(
                    AppStr.rateSubtitle,
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      fontFamily: 'Gelica',
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                _buildStarRatingRow(AppStr.foodLabel, foodRatingDisplay, (val) => foodRatingDisplay = val, (val) => foodRating = val),
                const SizedBox(height: 16),
                _buildStarRatingRow(AppStr.serviceLabel, serviceRatingDisplay, (val) => serviceRatingDisplay = val, (val) => serviceRating = val),
                const SizedBox(height: 16),
                _buildStarRatingRow(AppStr.ambianceLabel, ambianceRatingDisplay, (val) => ambianceRatingDisplay = val, (val) => ambianceRating = val),
                const SizedBox(height: 16),
                _buildStarRatingRow(AppStr.drinksLabel, drinksRatingDisplay, (val) => drinksRatingDisplay = val, (val) => drinksRating = val),
                const SizedBox(height: 16),
                _buildStarRatingRow(AppStr.vfmsLabel, vfmsRatingDisplay, (val) => vfmsRatingDisplay = val, (val) => vfmsRating = val),
                const SizedBox(height: 4),
                const Padding(
                  padding: EdgeInsets.only(left: 1),
                  child: Text(
                    AppStr.vfmText,
                    style: TextStyle(
                      fontSize: 16,
                      fontFamily: 'Gelica',
                      color: Colors.black54,
                    ),
                  ),
                ),
                const SizedBox(height: 24),
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        width: 90,
                        child: Text(
                          AppStr.michelinLabel,
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            fontFamily: 'Gelica',
                          ),
                        ),
                      ),
                      Expanded(
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: List.generate(4, (index) {
                            return Column(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Radio<int>(
                                  value: index,
                                  groupValue: michelinStars,
                                  onChanged: (value) {
                                    if (!mounted) return;
                                    setState(() {
                                      michelinStars = value!;
                                    });
                                  },
                                ),
                                Text(
                                  '$index',
                                  style: const TextStyle(
                                    fontSize: 16,
                                    fontFamily: 'Gelica',
                                  ),
                                ),
                              ],
                            );
                          }),
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 24),
                Center(
                  child: Text(
                    '${AppStr.totalRatingLabel} $totalRating / 100',
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      fontFamily: 'Gelica',
                      color: Color(0xFFB00020),
                    ),
                  ),
                ),
                const SizedBox(height: 36),
              ],
            ),
          ),
        ),
        const SizedBox(height: 36),
        SafeArea(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: _goBack,
                  style: ElevatedButton.styleFrom(backgroundColor: AppColors.ochre),
                  child: const Text(AppStr.back),
                ),
                ElevatedButton(
                  onPressed: _clearRatings,
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.grey),
                  child: const Text(AppStr.clear),
                ),
                ElevatedButton(
                  onPressed: _goToPreviewScreen,
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
                  child: const Text(AppStr.preview),
                ),
                ElevatedButton(
                  onPressed: _goToNextScreen,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.yellow,
                    foregroundColor: Colors.black,
                  ),
                  child: const Text(AppStr.next),
                ),
              ],
            ),
          ),
        ),
      ],
    ),
  );
}
}